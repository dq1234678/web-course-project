// {
//   // Visit https://aka.ms/tsconfig to read more about this file
//   "compilerOptions": {
//     // File Layout
//     // "rootDir": "./src",
//     // "outDir": "./dist",
//     // Environment Settings
//     // See also https://aka.ms/tsconfig/module
//     "module": "nodenext",
//     "target": "esnext",
//     "types": [],
//     // For nodejs:
//     // "lib": ["esnext"],
//     // "types": ["node"],
//     // and npm install -D @types/node
//     // Other Outputs
//     "sourceMap": true,
//     "declaration": true,
//     "declarationMap": true,
//     // Stricter Typechecking Options
//     "noUncheckedIndexedAccess": true,
//     "exactOptionalPropertyTypes": true,
//     // Style Options
//     // "noImplicitReturns": true,
//     // "noImplicitOverride": true,
//     // "noUnusedLocals": true,
//     // "noUnusedParameters": true,
//     // "noFallthroughCasesInSwitch": true,
//     // "noPropertyAccessFromIndexSignature": true,
//     // Recommended Options
//     "strict": true,
//     "jsx": "react-jsx",
//     "verbatimModuleSyntax": true,
//     "isolatedModules": true,
//     "noUncheckedSideEffectImports": true,
//     "moduleDetection": "force",
//     "skipLibCheck": true,
//   }
// }
// {
//   "compilerOptions": {
//     "target": "es2016", // 指定编译产物的 JS 版本
//     "module": "ESNext", // 指定生成什么模块代码
//     "moduleResolution": "bundler", // 指定TypeScript如何从给定的模块说明符中查找文件
//     "forceConsistentCasingInFileNames": true, // 确保导入时的大小写正确
//     "strict": true, // 启用所有严格类型检查选项。
//     "skipLibCheck": true, // 跳过库检查
//     "outDir": "dist", // 指定编译产物存放的目录
//     "allowJs": true, // 指定源目录的 JavaScript 文件是否原样拷贝到编译后的目录
//     "baseUrl": "./",
//     "paths": {
//       "@/*": [
//         "./src/*"
//       ]
//     }
//     // "isolatedModules": true, // 将每个文件作为单独的模块
//     // "noEmit": true, // 不生成输出文件
//     // "declaration": true, // 生成相应的 '.d.ts' 文件
//     // "declarationDir": "./types" // 为生成的声明文件指定输出目录
//   },
//   // 如果不指定文件后缀名，默认包括.ts、.tsx和.d.ts文件。如果打开了allowJs，那么还包括.js和.jsx。
//   "include": [
//     "./src/**/*"
//   ]
// }
{
  "compilerOptions": {
    /* 基本选项 */
    "target": "ESNext", // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNext'
    "module": "ESNext", // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015',"ESNext"
    "lib": [], // 指定要包含在编译中的库文件
    "allowJs": true, // 允许编译 javascript 文件
    "checkJs": true, // 报告 javascript 文件中的错误
    "jsx": "preserve", // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
    "declaration": true, // 生成相应的 '.d.ts' 文件
    "sourceMap": true, // 生成相应的 '.map' 文件
    "outFile": "./", // 将输出文件合并为一个文件
    "outDir": "./", // 指定输出目录
    "rootDir": "./", // 用来控制输出目录结构 --outDir.
    "removeComments": true, // 删除编译后的所有的注释
    "noEmit": true, // 不生成输出文件
    "importHelpers": true, // 从 tslib 导入辅助工具函数
    "isolatedModules": true, // 将每个文件作为单独的模块 （与 'ts.transpileModule' 类似）.
    /* 严格的类型检查选项 */
    "strict": true, // 启用所有严格类型检查选项
    "noImplicitAny": true, // 在表达式和声明上有隐含的 any类型时报错
    "strictNullChecks": true, // 启用严格的 null 检查
    "noImplicitThis": true, // 当 this 表达式值为 any 类型的时候，生成一个错误
    "alwaysStrict": true, // 以严格模式检查每个模块，并在每个文件里加入 'use strict'
    /* 额外的检查 */
    "noUnusedLocals": true, // 有未使用的变量时，抛出错误
    "noUnusedParameters": true, // 有未使用的参数时，抛出错误
    "noImplicitReturns": true, // 并不是所有函数里的代码都有返回值时，抛出错误
    "noFallthroughCasesInSwitch": true, // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）
    /* 模块解析选项 */
    "moduleResolution": "node", // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
    "baseUrl": "./", // 用于解析非相对模块名称的基目录
    "paths": {}, // 模块名到基于 baseUrl 的路径映射的列表
    "rootDirs": [], // 根文件夹列表，其组合内容表示项目运行时的结构内容
    "typeRoots": [], // 包含类型声明的文件列表
    "types": [], // 需要包含的类型声明文件名列表
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。
    /* Source Map Options */
    "sourceRoot": "./", // 指定调试器应该找到 TypeScript 文件而不是源文件的位置
    "mapRoot": "./", // 指定调试器应该找到映射文件而不是生成文件的位置
    "inlineSourceMap": true, // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件
    "inlineSources": true, // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性
    /* 其他选项 */
    "experimentalDecorators": true, // 启用装饰器
    "emitDecoratorMetadata": true // 为装饰器提供元数据的支持
    // ...
  }
}